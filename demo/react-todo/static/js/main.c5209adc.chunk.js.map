{"version":3,"sources":["todo/header.js","todo/item.js","todo/tabs.js","todo/todo.js","todo/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Item","props","state","todo","completed","content","author","handleInputChange","bind","deleteTodo","this","type","checked","onChange","onClick","e","changeTodoState","id","target","Tabs","states","clearAllCompleted","unFinishedTodoLength","map","key","filter","toggleFilter","todos","length","Todo","addTodo","filterTodos","placeholder","onKeyUp","val","setState","index","keyCode","arr","unshift","value","trim","splice","findIndex","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5209adc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n  render(){\r\n    return(\r\n      <header className=\"main-header\">\r\n        <h1>Toto</h1> \r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nclass Item extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      todo:{completed:true,content:\"123\"},\r\n      author:\"manna\"\r\n    }\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.deleteTodo = this.deleteTodo.bind(this);\r\n  }\r\n  render(){\r\n    return(\r\n    <div className={this.props.todo.completed ? 'todo-item completed' : 'todo-item'} >\r\n      <input type=\"checkbox\" className=\"toggle\" checked={this.props.todo.completed} onChange={this.handleInputChange}/>\r\n      <label>{this.props.todo.content}</label>\r\n      <button className=\"destory\" onClick={this.deleteTodo}></button>\r\n    </div>\r\n    )\r\n  }\r\n  handleInputChange(e){\r\n    return this.props.changeTodoState(this.props.todo.id,e.target.checked);\r\n  }\r\n  deleteTodo(){\r\n    return this.props.deleteTodo();\r\n  }\r\n}\r\nexport default Item;","import React from 'react'\r\nclass Tabs extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      states:[\"all\",\"active\",\"completed\"]\r\n    }\r\n    this.clearAllCompleted = this.clearAllCompleted.bind(this);\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"helper\">\r\n      <span className=\"left\">{this.unFinishedTodoLength()} items left</span>\r\n      <span className=\"tabs\">\r\n        {\r\n          this.state.states.map((state,key) => {\r\n            return(\r\n              <span key={state} className={this.props.filter === state? 'actived' : ''} onClick={this.toggleFilter.bind(this,state)}> \r\n                {state}\r\n              </span>\r\n            )\r\n          })\r\n        }\r\n      </span>\r\n      <span className=\"clear\" onClick={this.clearAllCompleted}>Clear Completed</span>\r\n    </div>\r\n    )\r\n  }\r\n  toggleFilter(state){\r\n    this.props.toggleFilter(state);\r\n  }\r\n  unFinishedTodoLength(){\r\n    return this.props.todos.filter(todo => !todo.completed).length;\r\n  }\r\n  clearAllCompleted(){\r\n    return this.props.clearAllCompleted();\r\n  }\r\n}\r\nexport default Tabs","import React from 'react'\r\nimport '../assets/styles/todo.css'\r\nimport Item from './item'\r\nimport Tabs from './tabs'\r\nlet id=0;\r\nclass Todo extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      todos:[],\r\n      filter:\"all\"\r\n    }\r\n    this.changeTodoState = this.changeTodoState.bind(this);\r\n    this.toggleFilter = this.toggleFilter.bind(this);\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.clearAllCompleted = this.clearAllCompleted.bind(this);\r\n  }\r\n  render(){\r\n    const filterTodos = this.filterTodos();\r\n    return (\r\n      <section className=\"real-app\">\r\n        <input className=\"add-input\" placeholder=\"新增工作\" onKeyUp={this.addTodo}/>\r\n        {\r\n        filterTodos.map((val,key) => {\r\n          return(<Item todo={val} key={val.id} changeTodoState={this.changeTodoState} deleteTodo={this.deleteTodo.bind(this,val.id)}></Item>)\r\n        })\r\n        }\r\n        <Tabs filter={this.state.filter} todos={this.state.todos} toggleFilter={this.toggleFilter} clearAllCompleted={this.clearAllCompleted}></Tabs>\r\n        \r\n      </section>\r\n    )\r\n  }\r\n  changeTodoState(id,completed){\r\n    this.setState({todos:this.state.todos.map((todo,index)=> {todo.completed=todo.id===id?completed:todo.completed;return todo;})}) \r\n  }\r\n  toggleFilter(state){\r\n    this.setState({filter:state});\r\n  }\r\n  filterTodos() {\r\n    if(this.state.filter === \"all\"){\r\n      return this.state.todos\r\n    }\r\n    const completed = this.state.filter === \"completed\"\r\n    return this.state.todos.filter(todo => todo.completed === completed)\r\n  }\r\n  addTodo(e){\r\n    if(e.keyCode===13){\r\n      var arr = this.state.todos;\r\n      arr.unshift({\r\n        id:id++,\r\n        content: e.target.value.trim(),\r\n        completed:false\r\n      });\r\n      this.setState({todos:arr})\r\n      e.target.value=\"\";\r\n    }\r\n  }\r\n  clearAllCompleted(){\r\n    var arr = this.state.todos.filter(todo => !todo.completed);\r\n    this.setState({todos:arr});\r\n  }\r\n  deleteTodo(id) {\r\n    var todos = this.state.todos; \r\n    todos.splice(todos.findIndex(todo => todo.id===id),1);\r\n    this.setState({todos:todos});\r\n  }\r\n}\r\nexport default Todo","import React from 'react'\r\nimport '../assets/styles/footer.css'\r\n\r\nclass Footer extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      author:\"manna\"\r\n    }\r\n  }\r\n  render() {\r\n    return(\r\n      <div className=\"footer\">\r\n        <span>Written by {this.props.author}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Footer;","import React from 'react';\n// import './assets/styles/reset.css';\nimport './assets/styles/App.css';\nimport Header from './todo/header.js';\nimport Todo from './todo/todo.js';\nimport Footer from './todo/footer.js';\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Header/>\n      <Todo/>\n      <Footer author=\"manna\"/>\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}